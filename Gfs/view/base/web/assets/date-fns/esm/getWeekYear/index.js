import toInteger from"../_lib/toInteger/index.js";import toDate from"../toDate/index.js";import startOfWeek from"../startOfWeek/index.js";export default function getWeekYear(dirtyDate,dirtyOptions){if(1>arguments.length){throw new TypeError("1 argument required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),year=date.getFullYear(),options=dirtyOptions||{},locale=options.locale,localeFirstWeekContainsDate=locale&&locale.options&&locale.options.firstWeekContainsDate,defaultFirstWeekContainsDate=null==localeFirstWeekContainsDate?1:toInteger(localeFirstWeekContainsDate),firstWeekContainsDate=null==options.firstWeekContainsDate?defaultFirstWeekContainsDate:toInteger(options.firstWeekContainsDate);if(!(1<=firstWeekContainsDate&&7>=firstWeekContainsDate)){throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively")}var firstWeekOfNextYear=new Date(0);firstWeekOfNextYear.setFullYear(year+1,0,firstWeekContainsDate);firstWeekOfNextYear.setHours(0,0,0,0);var startOfNextYear=startOfWeek(firstWeekOfNextYear,dirtyOptions),firstWeekOfThisYear=new Date(0);firstWeekOfThisYear.setFullYear(year,0,firstWeekContainsDate);firstWeekOfThisYear.setHours(0,0,0,0);var startOfThisYear=startOfWeek(firstWeekOfThisYear,dirtyOptions);if(date.getTime()>=startOfNextYear.getTime()){return year+1}else if(date.getTime()>=startOfThisYear.getTime()){return year}else{return year-1}}
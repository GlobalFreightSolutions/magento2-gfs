import getTimezoneOffsetInMilliseconds from"../_lib/getTimezoneOffsetInMilliseconds/index.js";import toDate from"../toDate/index.js";import format from"../format/index.js";import differenceInCalendarDays from"../differenceInCalendarDays/index.js";import defaultLocale from"../locale/en-US/index.js";import subMilliseconds from"../subMilliseconds/index.js";export default function formatRelative(dirtyDate,dirtyBaseDate,dirtyOptions){if(2>arguments.length){throw new TypeError("2 arguments required, but only "+arguments.length+" present")}var date=toDate(dirtyDate),baseDate=toDate(dirtyBaseDate),options=dirtyOptions||{},locale=options.locale||defaultLocale;if(!locale.localize){throw new RangeError("locale must contain localize property")}if(!locale.formatLong){throw new RangeError("locale must contain formatLong property")}if(!locale.formatRelative){throw new RangeError("locale must contain formatRelative property")}var diff=differenceInCalendarDays(date,baseDate);if(isNaN(diff)){throw new RangeError("Invalid time value")}var token;if(-6>diff){token="other"}else if(-1>diff){token="lastWeek"}else if(0>diff){token="yesterday"}else if(1>diff){token="today"}else if(2>diff){token="tomorrow"}else if(7>diff){token="nextWeek"}else{token="other"}var utcDate=subMilliseconds(date,getTimezoneOffsetInMilliseconds(date)),utcBaseDate=subMilliseconds(baseDate,getTimezoneOffsetInMilliseconds(baseDate)),formatStr=locale.formatRelative(token,utcDate,utcBaseDate,options);return format(date,formatStr,options)}